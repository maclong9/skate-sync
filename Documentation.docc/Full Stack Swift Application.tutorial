@Tutorials(name: "Full Stack Swift Application") {
    @Intro(title: "Building an Efficient and Robust Full Stack Application") {
        This tutorial will walk you through building a completely full stack application utilising Swift, to clarify, a complete full stack application consists of a backend server, a frontend web application and then native Apple platform applications such as an iPhone and iPad application.
        
        @Image(source: <#file#>, alt: "<#accessible description#>")
    }
		
		@Chapter(name: "Setting Up a Monorepo") {
			To begin with we need to create an Xcode project that will contain the various components of our complete full stack application.
			
			@Image(source: <#file#>, alt: "<#accessible description#>")
			
			@TutorialReference(tutorial: "doc:creating-an-xcode-workspace")
		}
		
    
    @Chapter(name: "A Shared Library") {
			  This contains common patterns such as models and utilities that are utilised across the front and backend of an application.
        
        @Image(source: <#file#>, alt: "<#accessible description#>")
        
        @TutorialReference(tutorial: "doc:creating-the-package")
				@TutorialReference(tutorial: "doc:adding-shared-models")
				@TutorialReference(tutorial: "doc:adding-utilities")
    }
		
		@Chapter(name: "Backend Server") {
			Built in Swift Hummingbird this part of the application is responsible for dealing with the business logic of the applciation such as creating, editing and deleting data.
				
				@Image(source: <#file#>, alt: "<#accessible description#>")
				
				@TutorialReference(tutorial: "doc:creating-the-package")
				@TutorialReference(tutorial: "doc:configuring-the-application")
				@TutorialReference(tutorial: "doc:laying-out-your-routes")
				@TutorialReference(tutorial: "doc:adding-controllers")
		}
		
		@Chapter(name: "Frontend Web Application") {
			Here is where the users can interact with the application via the web, the final rendered page is built using HTML, CSS and JS however development is done with WebUI a Swift DSL for creating modern and performant user interfaces for the web.
				
				@Image(source: <#file#>, alt: "<#accessible description#>")
				
				@TutorialReference(tutorial: "doc:adding-a-handler")
				@TutorialReference(tutorial: "doc:laying-out-your-routes")
				@TutorialReference(tutorial: "doc:constructing-your-views")
		}
		
		@Chapter(name: "Universal SwiftUI Application") {
			Most Apple platforms can be targeted via one build, for certain kinds of apps it is necessary to build a different experience for each device however for simple applications it can be beneficial to create a universal application.
				
				@Image(source: <#file#>, alt: "<#accessible description#>")
				
				@TutorialReference(tutorial: "doc:creating-the-package")
				@TutorialReference(tutorial: "doc:building-your-view-components")
				@TutorialReference(tutorial: "doc:constructing-your-views")
		}
		
		@Chapter(name: "Apple Watch Application") {
			Apple Watches use a different type of user interface and screen size, therefore it is necessary to build the application seperately, this can add some fun individuality to your application that makes it stand out.
				
				@Image(source: <#file#>, alt: "<#accessible description#>")
				
				@TutorialReference(tutorial: "doc:creating-the-package")
				@TutorialReference(tutorial: "doc:building-your-view-components")
				@TutorialReference(tutorial: "doc:constructing-your-views")
		}
		
		@Chapter(name: "Deploying and Distributing") {
			Finally we will walk through the process of deploying your completed full stack application, this includes running the application on a server and submitting your Apple applications for TestFlight and the App Store.
			
			@TutorialReference(tutorial: "doc:setting-up-your-server")
			@TutorialReference(tutorial: "doc:testing-via-testflight")
			@TutorialReference(tutorial: "doc:submitting-to-the-app-store")
		}
}
